(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    285460,       5749]
NotebookOptionsPosition[    281671,       5630]
NotebookOutlinePosition[    282014,       5645]
CellTagsIndexPosition[    281971,       5642]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"P", "[", "h_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"26", 
        RowBox[{"h", "/", "35"}]}], ",", 
       RowBox[{"9", 
        RowBox[{"h", "/", "35"}]}], ",", 
       RowBox[{"11", 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "105"}]}], ",", 
       RowBox[{
        RowBox[{"-", "13"}], 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "210"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"9", 
        RowBox[{"h", "/", "35"}]}], ",", 
       RowBox[{"26", 
        RowBox[{"h", "/", "35"}]}], ",", 
       RowBox[{"13", 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "210"}]}], ",", 
       RowBox[{
        RowBox[{"-", "11"}], 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "105"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"11", 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "105"}]}], ",", 
       RowBox[{"13", 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "210"}]}], ",", 
       RowBox[{"2", 
        RowBox[{
         RowBox[{"h", "^", "3"}], "/", "105"}]}], ",", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"h", "^", "3"}]}], "/", "70"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "13"}], 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "210"}]}], ",", 
       RowBox[{
        RowBox[{"-", "11"}], 
        RowBox[{
         RowBox[{"h", "^", "2"}], "/", "105"}]}], ",", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"h", "^", "3"}]}], "/", "70"}], ",", 
       RowBox[{"2", 
        RowBox[{
         RowBox[{"h", "^", "3"}], "/", "105"}]}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Q", "[", "h_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "12"}], "/", 
        RowBox[{"(", 
         RowBox[{"5", "h"}], ")"}]}], ",", 
       RowBox[{"12", "/", 
        RowBox[{"(", 
         RowBox[{"5", "h"}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"-", "11"}], "/", "5"}], ",", 
       RowBox[{
        RowBox[{"-", "1"}], "/", "5"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"12", "/", 
        RowBox[{"(", 
         RowBox[{"5", "h"}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"-", "12"}], "/", 
        RowBox[{"(", 
         RowBox[{"5", "h"}], ")"}]}], ",", 
       RowBox[{"1", "/", "5"}], ",", 
       RowBox[{"11", "/", "5"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "/", "5"}], ",", 
       RowBox[{"1", "/", "5"}], ",", 
       RowBox[{
        RowBox[{"-", "4"}], 
        RowBox[{"h", "/", "15"}]}], ",", 
       RowBox[{"h", "/", "15"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "/", "5"}], ",", 
       RowBox[{"1", "/", "5"}], ",", 
       RowBox[{"h", "/", "15"}], ",", 
       RowBox[{
        RowBox[{"-", "4"}], 
        RowBox[{"h", "/", "15"}]}]}], "}"}]}], "}"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "make", " ", "the", " ", "entire", " ", "P", " ", "or", " ", "Q", " ", 
    "matrix"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"makePorQ", "[", 
    RowBox[{"N_", ",", "PorQ_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"res", "=", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "N"}], ",", 
           RowBox[{"2", "N"}]}], "}"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"res", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "N", ",", 
            RowBox[{"N", "+", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "N", ",", 
            RowBox[{"N", "+", "1"}]}], "}"}]}], "]"}], "]"}], "+=", 
       RowBox[{"PorQ", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"res", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"i", "+", "1"}], ",", 
              RowBox[{"N", "+", "i"}], ",", 
              RowBox[{"N", "+", "i", "+", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"i", "+", "1"}], ",", 
              RowBox[{"N", "+", "i"}], ",", 
              RowBox[{"N", "+", "i", "+", "1"}]}], "}"}]}], "]"}], "]"}], "+=",
          "PorQ"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"N", "-", "2"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"res", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"N", "-", "1"}], ",", 
            RowBox[{
             RowBox[{"2", "N"}], "-", "1"}], ",", 
            RowBox[{"2", "N"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"N", "-", "1"}], ",", 
            RowBox[{
             RowBox[{"2", "N"}], "-", "1"}], ",", 
            RowBox[{"2", "N"}]}], "}"}]}], "]"}], "]"}], "+=", 
       RowBox[{"PorQ", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "res"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.922717282178005*^9, 3.9227172922682543`*^9}, {
  3.922717611648165*^9, 3.922717617488226*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "integrate", " ", "the", " ", "square", " ", "of", " ", "a", " ", 
    "function", " ", "in", " ", "an", " ", "interval"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"intsq", "[", 
     RowBox[{
     "\[Psi]0_", ",", "\[Psi]h_", ",", "\[Psi]dot0_", ",", "\[Psi]doth_", ",",
       "h_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      FractionBox["1", "35"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"13", " ", 
         SuperscriptBox["\[Psi]0", "2"]}], "+", 
        RowBox[{"9", " ", "\[Psi]0", " ", "\[Psi]h"}], "+", 
        RowBox[{"13", " ", 
         SuperscriptBox["\[Psi]h", "2"]}]}], ")"}], " ", "h"}], "+", 
     RowBox[{
      FractionBox["1", "210"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"22", " ", "\[Psi]0", " ", "\[Psi]dot0"}], "-", 
        RowBox[{"13", " ", "\[Psi]0", " ", "\[Psi]doth"}], "+", 
        RowBox[{"13", " ", "\[Psi]dot0", " ", "\[Psi]h"}], "-", 
        RowBox[{"22", " ", "\[Psi]doth", " ", "\[Psi]h"}]}], ")"}], " ", 
      SuperscriptBox["h", "2"]}], "+", 
     RowBox[{
      FractionBox["1", "210"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", 
         SuperscriptBox["\[Psi]dot0", "2"]}], "-", 
        RowBox[{"3", " ", "\[Psi]dot0", " ", "\[Psi]doth"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[Psi]doth", "2"]}]}], ")"}], " ", 
      SuperscriptBox["h", "3"]}]}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.9227156253813877`*^9, 3.922715643239922*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "normalize", " ", "an", " ", "eigenvector", " ", "of", " ", "the", " ", 
    "Hamiltonian"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"normal", "[", 
    RowBox[{"\[Psi]_", ",", "N_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{
      RowBox[{"res", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"res", "+=", 
       RowBox[{"intsq", "[", 
        RowBox[{"0", ",", 
         RowBox[{"\[Psi]", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"\[Psi]", "[", 
          RowBox[{"[", "N", "]"}], "]"}], ",", 
         RowBox[{"\[Psi]", "[", 
          RowBox[{"[", 
           RowBox[{"N", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"1", "/", "N"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"res", "+=", 
         RowBox[{"intsq", "[", 
          RowBox[{
           RowBox[{"\[Psi]", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"\[Psi]", "[", 
            RowBox[{"[", 
             RowBox[{"i", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"\[Psi]", "[", 
            RowBox[{"[", 
             RowBox[{"N", "+", "i"}], "]"}], "]"}], ",", 
           RowBox[{"\[Psi]", "[", 
            RowBox[{"[", 
             RowBox[{"N", "+", "i", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"1", "/", "N"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"N", "-", "2"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"res", "+=", 
       RowBox[{"intsq", "[", 
        RowBox[{
         RowBox[{"\[Psi]", "[", 
          RowBox[{"[", 
           RowBox[{"N", "-", "1"}], "]"}], "]"}], ",", "0", ",", 
         RowBox[{"\[Psi]", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"2", "N"}], "-", "1"}], "]"}], "]"}], ",", 
         RowBox[{"\[Psi]", "[", 
          RowBox[{"[", 
           RowBox[{"2", "N"}], "]"}], "]"}], ",", 
         RowBox[{"1", "/", "N"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"1", "/", 
       RowBox[{"Sqrt", "[", "res", "]"}]}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.92271566507942*^9, 3.922715679989714*^9}, {
  3.9227161079176083`*^9, 3.922716188904317*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "use", " ", "values", " ", "and", " ", "first", " ", "derivatives", " ", 
    "to", " ", "get", " ", "the", " ", "value", " ", "at", " ", "a", " ", 
    "specified", " ", "location"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"A", "[", 
      RowBox[{"x0_", ",", "v0_", ",", "xh_", ",", "vh_", ",", "h_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"(", 
        RowBox[{"x0", "-", "xh"}], ")"}], 
       RowBox[{"h", "^", 
        RowBox[{"-", "3"}]}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"v0", "+", "vh"}], ")"}], 
       RowBox[{"h", "^", 
        RowBox[{"-", "2"}]}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"B", "[", 
      RowBox[{"x0_", ",", "v0_", ",", "xh_", ",", "vh_", ",", "h_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"3", 
       RowBox[{"(", 
        RowBox[{"xh", "-", "x0"}], ")"}], 
       RowBox[{"h", "^", 
        RowBox[{"-", "2"}]}]}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", "v0"}], "+", "vh"}], ")"}], 
       RowBox[{"h", "^", 
        RowBox[{"-", "1"}]}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"interp", "[", 
      RowBox[{
      "\[Psi]0_", ",", "\[Psi]h_", ",", "\[Psi]dot0_", ",", "\[Psi]doth_", 
       ",", "h_", ",", "x_"}], "]"}], ":=", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A\[Psi]", "=", 
          RowBox[{"A", "[", 
           RowBox[{
           "\[Psi]0", ",", "\[Psi]dot0", ",", "\[Psi]h", ",", "\[Psi]doth", 
            ",", "h"}], "]"}]}], ",", 
         RowBox[{"B\[Psi]", "=", 
          RowBox[{"B", "[", 
           RowBox[{
           "\[Psi]0", ",", "\[Psi]dot0", ",", "\[Psi]h", ",", "\[Psi]doth", 
            ",", "h"}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\[Psi]0", "+", 
        RowBox[{"\[Psi]dot0", " ", "x"}], "+", 
        RowBox[{"B\[Psi]", " ", 
         RowBox[{"x", "^", "2"}]}], "+", 
        RowBox[{"A\[Psi]", " ", 
         RowBox[{"x", "^", "3"}]}]}]}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.922715695619545*^9, 3.9227157168299923`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "render", " ", "a", " ", "piecewise", " ", "cubic", " ", "function", " ", 
    "from", " ", "a", " ", "renormalize", " ", "eigenvector"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"render", "[", 
    RowBox[{"\[Psi]_", ",", "N_", ",", "x_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", "=", 
       RowBox[{"IntegerPart", "[", 
        RowBox[{"x", "*", "N"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"N", "\[Equal]", "1"}], ",", 
        RowBox[{"res", "=", 
         RowBox[{"interp", "[", 
          RowBox[{"0", ",", "0", ",", 
           RowBox[{"\[Psi]", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"\[Psi]", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", "1", ",", "x"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[Equal]", "N"}], ",", 
           RowBox[{"i", "-=", "1"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[Equal]", "0"}], ",", 
           RowBox[{"res", "=", 
            RowBox[{"interp", "[", 
             RowBox[{"0", ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", "N", "]"}], "]"}], ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{"N", "+", "1"}], "]"}], "]"}], ",", 
              RowBox[{"1", "/", "N"}], ",", 
              RowBox[{"x", "-", 
               RowBox[{"i", "/", "N"}]}]}], "]"}]}], ","}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"0", "<", "i", "<", 
            RowBox[{"N", "-", "1"}]}], ",", 
           RowBox[{"res", "=", 
            RowBox[{"interp", "[", 
             RowBox[{
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{"i", "+", "1"}], "]"}], "]"}], ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{"N", "+", "i"}], "]"}], "]"}], ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{"N", "+", "i", "+", "1"}], "]"}], "]"}], ",", 
              RowBox[{"1", "/", "N"}], ",", 
              RowBox[{"x", "-", 
               RowBox[{"i", "/", "N"}]}]}], "]"}]}], ","}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", "\[Equal]", 
            RowBox[{"N", "-", "1"}]}], ",", 
           RowBox[{"res", "=", 
            RowBox[{"interp", "[", 
             RowBox[{
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{"N", "-", "1"}], "]"}], "]"}], ",", "0", ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"2", "N"}], "-", "1"}], "]"}], "]"}], ",", 
              RowBox[{"\[Psi]", "[", 
               RowBox[{"[", 
                RowBox[{"2", "N"}], "]"}], "]"}], ",", 
              RowBox[{"1", "/", "N"}], ",", 
              RowBox[{"x", "-", 
               RowBox[{"i", "/", "N"}]}]}], "]"}]}], ","}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", "res"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.922715727089594*^9, 3.9227157515996685`*^9}, {
  3.9227162583400774`*^9, 3.9227163381196966`*^9}, {3.922724995719101*^9, 
  3.922725030389254*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"N", " ", "=", " ", 
   RowBox[{"1", " ", "case"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{3.922719214911641*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P1", "=", 
  RowBox[{"P", "[", "1", "]"}]}]], "Input",
 CellChangeTimes->{{3.9227192201218524`*^9, 3.922719223421961*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["26", "35"], ",", 
     FractionBox["9", "35"], ",", 
     FractionBox["11", "105"], ",", 
     RowBox[{"-", 
      FractionBox["13", "210"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["9", "35"], ",", 
     FractionBox["26", "35"], ",", 
     FractionBox["13", "210"], ",", 
     RowBox[{"-", 
      FractionBox["11", "105"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["11", "105"], ",", 
     FractionBox["13", "210"], ",", 
     FractionBox["2", "105"], ",", 
     RowBox[{"-", 
      FractionBox["1", "70"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["13", "210"]}], ",", 
     RowBox[{"-", 
      FractionBox["11", "105"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "70"]}], ",", 
     FractionBox["2", "105"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.922719223911329*^9, 3.922719657039347*^9, 
  3.9227211003737693`*^9, 3.9227224407850237`*^9, 3.922724923496918*^9, 
  3.9227251976812105`*^9, 3.9227252698480825`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Q1", "=", 
  RowBox[{"Q", "[", "1", "]"}]}]], "Input",
 CellChangeTimes->{{3.9227192259714994`*^9, 3.922719226713583*^9}, {
  3.922719328671434*^9, 3.9227193295518913`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["12", "5"]}], ",", 
     FractionBox["12", "5"], ",", 
     RowBox[{"-", 
      FractionBox["11", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["12", "5"], ",", 
     RowBox[{"-", 
      FractionBox["12", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["11", "5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     RowBox[{"-", 
      FractionBox["4", "15"]}], ",", 
     FractionBox["1", "15"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["1", "15"], ",", 
     RowBox[{"-", 
      FractionBox["4", "15"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227192269717045`*^9, 3.9227193298775234`*^9, 
  3.922719657045494*^9, 3.922721100390094*^9, 3.922722440805024*^9, 
  3.922724923508869*^9, 3.9227251976878166`*^9, 3.922725269862829*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"PP1", "=", 
   RowBox[{"P1", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
  RowBox[{"MatrixPlot", "[", "PP1", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922719274246781*^9, 3.9227193058816104`*^9}, 
   3.92271934337381*^9, {3.9227207089841075`*^9, 3.9227207345899687`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"QQ1", "=", 
   RowBox[{"Q1", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
  RowBox[{"MatrixPlot", "[", "QQ1", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227193155336885`*^9, 3.922719345453414*^9}, {
  3.9227207360899177`*^9, 3.9227207523202314`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HH1", "=", 
   RowBox[{"-", 
    RowBox[{
     RowBox[{"Inverse", "[", "PP1", "]"}], ".", "QQ1"}]}]}], ";", 
  RowBox[{"MatrixPlot", "[", "HH1", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922719386902815*^9, 3.922719400346101*^9}, {
  3.9227207553215284`*^9, 3.922720764910339*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"EE1", ",", "\[Psi]\[Psi]1"}], "}"}], "=", 
   RowBox[{"Eigensystem", "[", "HH1", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9227194113130393`*^9, 3.922719418692963*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NN1", "=", 
    RowBox[{"{", 
     RowBox[{
      SqrtBox["210"], ",", 
      SqrtBox["30"]}], "}"}]}], ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"yesterday", "'"}], "s", " ", "results"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.922719430932726*^9, 3.9227194611025877`*^9}, {
  3.922725037219943*^9, 3.922725040058874*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixPlot", "[", 
   RowBox[{
    RowBox[{"Sign", "[", 
     RowBox[{"\[Psi]\[Psi]1", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "*", "NN1", "*", 
    "\[Psi]\[Psi]1"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922719469820076*^9, 3.9227194775646105`*^9}, 
   3.922719524953887*^9, {3.922720767923341*^9, 3.9227207804400415`*^9}, {
   3.922725045359112*^9, 3.922725064878786*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       SqrtBox["2"], 
       RowBox[{"Sin", "[", 
        RowBox[{"Pi", " ", "x"}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"-", 
        SqrtBox["30"]}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "x"}], ")"}], " ", "x"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"PlotLegends", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Exact\>\"", ",", "\"\<N=1\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Center", ",", "Bottom"}], "}"}]}], "]"}]}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9227195336275682`*^9, 3.9227195483850136`*^9}, 
   3.92271964785021*^9, 3.9227212466032085`*^9, {3.9227212957332287`*^9, 
   3.9227213079930725`*^9}, {3.9227223183473387`*^9, 
   3.9227223450013595`*^9}, {3.9227223832454967`*^9, 3.9227223871121187`*^9}, 
   3.922722433295455*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       SqrtBox["2"], 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "Pi", " ", "x"}], "]"}]}], ",", 
      RowBox[{
       SqrtBox["210"], " ", "x", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"3", " ", "x"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["x", "2"]}]}], ")"}]}], ","}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922719560866465*^9, 3.922719565903061*^9}, 
   3.9227196487159014`*^9, 3.922721247432749*^9, 3.9227213102733507`*^9, 
   3.9227223189611316`*^9, {3.9227223513710375`*^9, 3.922722379355774*^9}, 
   3.9227224326052957`*^9}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"N", " ", "=", " ", 
   RowBox[{"2", " ", "case"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.9227163964026604`*^9, 3.9227164001987*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P2", "=", 
  RowBox[{"P", "[", 
   RowBox[{"1", "/", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9227130108886595`*^9, 3.922713017082416*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "35"], ",", 
     FractionBox["9", "70"], ",", 
     FractionBox["11", "420"], ",", 
     RowBox[{"-", 
      FractionBox["13", "840"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["9", "70"], ",", 
     FractionBox["13", "35"], ",", 
     FractionBox["13", "840"], ",", 
     RowBox[{"-", 
      FractionBox["11", "420"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["11", "420"], ",", 
     FractionBox["13", "840"], ",", 
     FractionBox["1", "420"], ",", 
     RowBox[{"-", 
      FractionBox["1", "560"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["13", "840"]}], ",", 
     RowBox[{"-", 
      FractionBox["11", "420"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "560"]}], ",", 
     FractionBox["1", "420"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9227130130943336`*^9, 3.9227130174526215`*^9}, 
   3.9227160364752088`*^9, 3.922716356159397*^9, 3.9227196573573003`*^9, 
   3.922721100669896*^9, 3.9227224411751423`*^9, 3.922724923796376*^9, 
   3.9227251979504395`*^9, 3.9227252701781034`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Q2", "=", 
  RowBox[{"Q", "[", 
   RowBox[{"1", "/", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9227130243427324`*^9, 3.922713026042768*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["24", "5"]}], ",", 
     FractionBox["24", "5"], ",", 
     RowBox[{"-", 
      FractionBox["11", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["24", "5"], ",", 
     RowBox[{"-", 
      FractionBox["24", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["11", "5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     RowBox[{"-", 
      FractionBox["2", "15"]}], ",", 
     FractionBox["1", "30"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["1", "30"], ",", 
     RowBox[{"-", 
      FractionBox["2", "15"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227130262828283`*^9, 3.9227160364919105`*^9, 
  3.9227163561797056`*^9, 3.922719657373106*^9, 3.922721100679826*^9, 
  3.9227224411918297`*^9, 3.9227249238114886`*^9, 3.922725197967775*^9, 
  3.9227252701908445`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"PP2", "=", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], ";", 
    RowBox[{
     RowBox[{"PP2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "]"}], "+=", 
     RowBox[{"P2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PP2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}], "+=", 
     RowBox[{"P2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"PP2", "=", 
    RowBox[{"makePorQ", "[", 
     RowBox[{"2", ",", "P2"}], "]"}]}], ";", 
   RowBox[{"MatrixPlot", "[", "PP2", "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.9227134620685234`*^9, 3.922713512923706*^9}, {
  3.922713613370266*^9, 3.9227136633577976`*^9}, {3.9227173220483246`*^9, 
  3.922717338218252*^9}, {3.922717379414422*^9, 3.9227173862896852`*^9}, {
  3.9227207901200867`*^9, 3.922720805899972*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"QQ2", "=", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], ";", 
    RowBox[{
     RowBox[{"QQ2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "]"}], "+=", 
     RowBox[{"Q2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"QQ2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}], "+=", 
     RowBox[{"Q2", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"QQ2", "=", 
     RowBox[{"makePorQ", "[", 
      RowBox[{"2", ",", "Q2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MatrixPlot", "[", "QQ2", "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.922713750927761*^9, 3.922713756977462*^9}, {
  3.9227173548384924`*^9, 3.9227173987332625`*^9}, {3.9227208120200963`*^9, 
  3.922720831870303*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HH2", "=", 
   RowBox[{"-", 
    RowBox[{
     RowBox[{"Inverse", "[", "PP2", "]"}], ".", "QQ2"}]}]}], ";", 
  RowBox[{"MatrixPlot", "[", "HH2", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227137599155145`*^9, 3.92271377272793*^9}, {
  3.922720836350401*^9, 3.9227208663398685`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"EE2", ",", "\[Psi]\[Psi]2"}], "}"}], "=", 
  RowBox[{"Eigensystem", "[", "HH2", "]"}]}]], "Input",
 CellChangeTimes->{{3.9227137858778267`*^9, 3.9227137894305325`*^9}, {
  3.922714022098718*^9, 3.9227140384850717`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"168", ",", 
     RowBox[{
      FractionBox["24", "65"], " ", 
      RowBox[{"(", 
       RowBox[{"141", "+", 
        RowBox[{"16", " ", 
         SqrtBox["51"]}]}], ")"}]}], ",", "40", ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["24", "65"]}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "141"}], "+", 
        RowBox[{"16", " ", 
         SqrtBox["51"]}]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["1", "39"], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "5"}], "+", 
          SqrtBox["51"]}], ")"}]}], ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["1", "39"], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "5"}], "-", 
          SqrtBox["51"]}], ")"}]}], ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.922713786113141*^9, 3.922713789847827*^9}, 
   3.922714039164626*^9, 3.9227160365914774`*^9, 3.922716356279539*^9, 
   3.922719657469386*^9, 3.92272110080995*^9, 3.922722441308451*^9, 
   3.92272492390685*^9, 3.922725198061385*^9, 3.922725270296916*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"EE2", "/", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"4", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "]"}], "Pi"}], ")"}], "^", "2"}]}], ",", 
   "16"}], "]"}]], "Input",
 CellChangeTimes->{{3.9227140445301323`*^9, 3.9227140847460475`*^9}, {
  3.922714577696174*^9, 3.922714578010027*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.06387242824454660016073436370213931743`16.", ",", 
   "1.06106808590776015462020270265633451718`16.", ",", 
   "1.01321183642337771443879463209727554041`16.", ",", 
   "1.0002606251584976412208865530689291265`16."}], "}"}]], "Output",
 CellChangeTimes->{{3.922714058984912*^9, 3.9227140850748205`*^9}, 
   3.9227145782138443`*^9, 3.922716036602702*^9, 3.9227163562895837`*^9, 
   3.922719657485732*^9, 3.9227211008448257`*^9, 3.922722441324996*^9, 
   3.9227249239268227`*^9, 3.9227251980776014`*^9, 3.922725270307789*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NN2", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"normal", "[", 
     RowBox[{
      RowBox[{"\[Psi]\[Psi]2", "[", 
       RowBox[{"[", "i", "]"}], "]"}], ",", "2"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.922714445619182*^9, 3.9227144530789766`*^9}, {
  3.9227154062292876`*^9, 3.922715409118578*^9}, {3.922715590792491*^9, 
  3.9227156057880697`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"2", " ", 
    SqrtBox["210"]}], ",", 
   FractionBox["1", 
    SqrtBox[
     RowBox[{
      FractionBox["1", "420"], "+", 
      FractionBox[
       RowBox[{"5", "-", 
        SqrtBox["51"]}], "1260"], "+", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "5"}], "+", 
          SqrtBox["51"]}], ")"}], "2"], "4095"]}]]], ",", 
   RowBox[{"2", " ", 
    SqrtBox["30"]}], ",", 
   FractionBox["1", 
    SqrtBox[
     RowBox[{
      FractionBox["1", "420"], "+", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "5"}], "-", 
          SqrtBox["51"]}], ")"}], "2"], "4095"], "+", 
      FractionBox[
       RowBox[{"5", "+", 
        SqrtBox["51"]}], "1260"]}]]]}], "}"}]], "Output",
 CellChangeTimes->{3.92271445353335*^9, 3.9227145621845756`*^9, 
  3.9227154095144625`*^9, 3.922715606134544*^9, 3.92271603662147*^9, 
  3.922716356304448*^9, 3.922719657495659*^9, 3.9227211008623924`*^9, 
  3.922722441345312*^9, 3.922724923946826*^9, 3.9227251980976667`*^9, 
  3.9227252703643875`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixPlot", "[", 
   RowBox[{
    RowBox[{"Sign", "[", 
     RowBox[{"\[Psi]\[Psi]2", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "*", "NN2", "*", 
    "\[Psi]\[Psi]2"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227208783900385`*^9, 3.922720880870457*^9}, 
   3.922720934280051*^9, {3.9227250755286465`*^9, 3.9227250833066936`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"plot\[Psi]2", "[", "i_", "]"}], ":=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"render", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Sign", "[", 
           RowBox[{"\[Psi]\[Psi]2", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "2"}], "]"}], "]"}], "]"}], "*", 
          RowBox[{"NN2", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "*", 
          RowBox[{"\[Psi]\[Psi]2", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", "2", ",", "x"}], "]"}], ",", 
       RowBox[{
        SqrtBox["2"], 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"5", "-", "i"}], ")"}], "Pi", " ", "x"}], "]"}]}]}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9227164972428436`*^9, 3.9227165494367867`*^9}, 
   3.9227165902324705`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot\[Psi]2", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.9227165963128047`*^9, 3.922716615726817*^9}, {
   3.9227166837667875`*^9, 3.9227167064268675`*^9}, 3.9227196873658543`*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
R2rBuafB8G7fZta/f4g5gv///0f/BwGDKdE=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
37VJDK/75pVZNwLn0cwOh7OTICVp0vWtI8iy9tV4qT0JIYGRc6IDIyhfF7Du
3OgEDH4unMlbNgrR3L6eE3oTKEjHun6bUUz/tlnm8ogNjjdnoZ3dKJiev+wK
othQtchhdTuMIoyRV9t7hY13y5e/+nZ+FFoiD0ZFDdiou0HTabo8ire3czcU
DIyh0/667cvQURzfKfWgRW4MCza8u3sjbxTRKwhn/ugRWOerCknPjsI0Z87Q
IY1h3Ai5H9D1ZAy63d9KRI/04PmQ9D1BIzZoJp27795tQ3hayCnaYTbaGFvc
NE3acPro6Po8Ezbar04Lf1jYBqnS0oJDFmzc6HZ2b/X4hJsxlnW37Nkwv++/
1vBwK86rpkwIXGNjT+qjCePZJsgHi+5bmM2G71CCtVZhFWbVfZd9e8yGUfp1
KWmZKvwY7WvLfspGac0u14mISsRavLI2eMHGgjZnB0/bCvzbdNQ9pJSNL789
ov6IlKLrU0z63M9shI7Kbnvy9iWKQ385fP7KBl0jfoV2zAvE77LdmPWdDYup
kP5ahwIcfLSlUJfGRufuPH1HiWd469XyPmCYive/yo79pQ+QqLwzxmSEjRCh
K7Tu05m41JtqJsdmQ0k6eF/L6lQoGjnTK7hs2Esza0pKb2Me/5eHsb/YcLXd
q68qeQuM17ucTk2xMalfUzxQGohSp6ytKn/Z2Pn4Q86KsstIklnC+/ePjfvq
uf///53/A1pc08M=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-1.4142131903142157`, 1.4632508459209586`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.9227167045468245`*^9, 3.922716706926999*^9}, 
   3.922719657585411*^9, 3.9227196880266294`*^9, 3.9227211010397882`*^9, 
   3.922722441485133*^9, 3.9227249240566945`*^9, 3.922725198209722*^9, 
   3.9227252705453444`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"N", " ", "=", " ", 
   RowBox[{"4", " ", "case"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{3.922716811830763*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P4", "=", 
  RowBox[{"P", "[", 
   RowBox[{"1", "/", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.922716923980369*^9, 3.922716925170371*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "70"], ",", 
     FractionBox["9", "140"], ",", 
     FractionBox["11", "1680"], ",", 
     RowBox[{"-", 
      FractionBox["13", "3360"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["9", "140"], ",", 
     FractionBox["13", "70"], ",", 
     FractionBox["13", "3360"], ",", 
     RowBox[{"-", 
      FractionBox["11", "1680"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["11", "1680"], ",", 
     FractionBox["13", "3360"], ",", 
     FractionBox["1", "3360"], ",", 
     RowBox[{"-", 
      FractionBox["1", "4480"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["13", "3360"]}], ",", 
     RowBox[{"-", 
      FractionBox["11", "1680"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "4480"]}], ",", 
     FractionBox["1", "3360"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227169259403095`*^9, 3.9227196576155367`*^9, 
  3.922721101069755*^9, 3.9227224415150595`*^9, 3.922724924086557*^9, 
  3.9227251982397003`*^9, 3.9227252705679016`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Q4", "=", 
  RowBox[{"Q", "[", 
   RowBox[{"1", "/", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9227169350960693`*^9, 3.922716936956418*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["48", "5"]}], ",", 
     FractionBox["48", "5"], ",", 
     RowBox[{"-", 
      FractionBox["11", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["48", "5"], ",", 
     RowBox[{"-", 
      FractionBox["48", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["11", "5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     RowBox[{"-", 
      FractionBox["1", "15"]}], ",", 
     FractionBox["1", "60"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["1", "60"], ",", 
     RowBox[{"-", 
      FractionBox["1", "15"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227169377564173`*^9, 3.922719657635553*^9, 
  3.9227211010995483`*^9, 3.9227224415349956`*^9, 3.9227249241066723`*^9, 
  3.9227251982477784`*^9, 3.9227252705878253`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"PP4", "=", 
   RowBox[{"makePorQ", "[", 
    RowBox[{"4", ",", "P4"}], "]"}]}], ";", 
  RowBox[{"MatrixPlot", "[", "PP4", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227174041691136`*^9, 3.922717407958619*^9}, 
   3.922717668738191*^9, 3.922717837040268*^9, {3.9227209387503653`*^9, 
   3.9227209497803116`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"QQ4", "=", 
   RowBox[{"makePorQ", "[", 
    RowBox[{"4", ",", "Q4"}], "]"}]}], ";", 
  RowBox[{"MatrixPlot", "[", "QQ4", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922717676248459*^9, 3.9227176844883757`*^9}, 
   3.922717839130782*^9, {3.9227209513029003`*^9, 3.922720960929963*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HH4", "=", 
   RowBox[{"-", 
    RowBox[{
     RowBox[{"Inverse", "[", "PP4", "]"}], ".", "QQ4"}]}]}], ";", 
  RowBox[{"MatrixPlot", "[", "HH4", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227177049782214`*^9, 3.9227177185586586`*^9}, 
   3.9227178410805264`*^9, 3.9227180237701087`*^9, 3.9227196706859407`*^9, {
   3.922720961840209*^9, 3.922720971520074*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"EE4", ",", "\[Psi]\[Psi]4"}], "}"}], "=", 
   RowBox[{"Eigensystem", "[", 
    RowBox[{"N", "[", 
     RowBox[{"HH4", ",", "16"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.922717848322303*^9, 3.9227178745820627`*^9}, {
  3.9227182974174957`*^9, 3.922718306877676*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"EE4", "/", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"8", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "]"}], "Pi"}], ")"}], "^", "2"}]}], ",", 
   "16"}], "]"}]], "Input",
 CellChangeTimes->{{3.922717884120335*^9, 3.9227178864902973`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.06387242824454660016210770758362477893`16.", ",", 
   "1.13335557473649839963981851462257560209`16.", ",", 
   "1.06106808590776015462054411879062980616`16.", ",", 
   "1.02208935187568764282087281378266539333`16.", ",", 
   "1.01321183642337771443892240999247843869`16.", ",", 
   "1.00185486699762055679575862854596426507`16.", ",", 
   "1.00026062515849764122257016270889008449`16.", ",", 
   "1.00000635036758675854039743258525355074`16."}], "}"}]], "Output",
 CellChangeTimes->{
  3.922717886710227*^9, {3.922718302218298*^9, 3.9227183086290812`*^9}, 
   3.9227196577656527`*^9, 3.9227211013647223`*^9, 3.922722441656175*^9, 
   3.9227249241967583`*^9, 3.922725198337756*^9, 3.922725270697419*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"NN4", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"normal", "[", 
      RowBox[{
       RowBox[{"\[Psi]\[Psi]4", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", "4"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "8"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9227178993639565`*^9, 3.9227179338226957`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixPlot", "[", 
   RowBox[{
    RowBox[{"Sign", "[", 
     RowBox[{"\[Psi]\[Psi]4", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "4"}], "]"}], "]"}], "]"}], "*", "NN4", "*", 
    "\[Psi]\[Psi]4"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922720987521484*^9, 3.922720991470128*^9}, {
  3.922725089888946*^9, 3.922725096182415*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"plot\[Psi]4", "[", "i_", "]"}], ":=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SqrtBox["2"], 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"9", "-", "i"}], ")"}], "Pi", " ", "x"}], "]"}]}], ",", 
       RowBox[{"render", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Sign", "[", 
           RowBox[{"\[Psi]\[Psi]4", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "4"}], "]"}], "]"}], "]"}], "*", 
          RowBox[{"NN4", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "*", 
          RowBox[{"\[Psi]\[Psi]4", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", "4", ",", "x"}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9227182327472305`*^9, 3.9227182651708517`*^9}, {
  3.9227184811074347`*^9, 3.9227184851667404`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot\[Psi]4", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.9227179480304885`*^9, 3.922717983800358*^9}, {
   3.9227180369799027`*^9, 3.922718039809309*^9}, 3.9227181133370824`*^9, 
   3.9227181468675613`*^9, {3.9227181862071767`*^9, 3.922718196677725*^9}, {
   3.922718269877637*^9, 3.9227182833274465`*^9}, {3.922718351317748*^9, 
   3.9227183773392897`*^9}, {3.9227184654574895`*^9, 3.922718468006317*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwdXHc81e/7Jg2lpNIgLS1JolQ0XEJSRIPSslJJhUplJkJkflDJroySPcvo
kb3JFpnHPsc657xl1e98f3+d1/V6nnOP676e533f79d5nS2GZudvzuPi4lo8
n4vrf5+nbw78zB3Ulo91UU+Zpx4pP19J2LxDSAY2fou6RN1eYH9YQHCKkDKe
SB8Xb3X1g1plU3KIkBZKqaM3z7l+xCWjyRxfISPs+PeUYeGSgt97Xyp5ClnA
Kz/96i77fISv1nR5JeSEdIWJfxsM62BT+bbgYqYTdJ+qXo2ersNF5855W686
gwwn7mD71mMp+4F9VrALOncephrzGmBZ729J3+QGcevOWYdNzTjn98tEY4cX
6iM8TellbXDgTdnpJuSP/U9d22ZHuiF+8j/XZHN//Hmce6riSA9qnc0GW4v9
YR2be17HtQfbeCS+SD55jTul+3k/bKahaC5Csr72DRLV2vraz/RiKfPNgU0e
7zDwtbp/XWA/An5bK6X9DcWiD3fuB04M47jI5Yh27TCsWrqndPEBOoauHFrA
GxeGcQFPzTVP6dhIt7oRtycc+wUrwTNNh9mdg9u52sIRwV6dtmqGgZVGCZ8i
ZT9gu+LrKrXBUehcfp8wNh4BT9vGzh1fxzHaqrXkg3AkmAJLD0TUjMNFl/fm
BaVI8FyR2TA8MI6UG2bC6f6RmGq/7lC/bgL8psecbQ5FoWJJa+SyJxModGy5
stAuGnwJbHbrdiauLfBMy4iM5vDgLffzMBMTLxUE7lRFg3cy47u7JhObPaML
yzd9gr7txv80LZmwfftY6r+8T9CTzH7NV8zEvtgVC0V4Y/Ag4NajLZdZKJUs
1K+UikHRG99EDRMW9JMss55djkFc6l6fYzYseKZ3mHfFxKBt2tdYL5iFgdy4
1qgzX5CSVjQ/vpUFeyWDgzpPvsBx8aqm7iEW1hQJ/rc47AvsfizMb5piQanc
RuXe2Bc0reiV5l7LRmjDqSRpv1isb3oQfEaDjQM6c3w9WbGwHAu8/ewqGxW/
Em/502JxO+ku674xG1Mda0UmD8QhojUzzdWBDa2hXpfs5jhocrelfUpkY/je
u6773PGYrxJ6uzyLDcdR9aObxOOhur4l9UsRG4mslHEHm3g4yYeERLSywffP
4drJjQlQuyQuazGPQsCdS7oSKgm4cKfP5QIfhW31EvorTBOw7Mav9ROrKMh/
brrRmpMAkQJ6yr1tFMpXxd3M7U0AO/KTi6oEBQn8SKldmIh3E03yPfspfPv8
Ji1DMhG8b7kWaStS4NJzOBijmIjtQT703acoqAjeywi+mIhDHT8Mf2hSqHt2
/JvDs0R8UHmcuvMaBWEZicMWvokwFfC++8eAgv7gmqxbUYmY+mll8vI2BcYF
erZaVSLscg7/63hAQWZx0zH57kScP5j45PMTCtbff3yXohLREHJgSsqGQu6j
WGxdkgRP02dWT+wpLNr1Nnf1xiTsZP4bsnpBQaPd4TjvviScuDt+/MhLCv5+
9/KmTyRhg6T6o8xXFH6pXlJiXE5CU1m5xaQnhS1/jxd03E9Cyo6RoxM+FIxT
JE7UOiRhLICZF+NHId54bVHB6yQ4zO/4u/kNBdaGeSczPnPw6ONBrQAKR+ro
xZ9zkmASoGCrEkjB0bVJNfhnElYvfpXEDqJQciyv1Ks3CdY79Z0MQyjwM2NP
O0wl4WCB35hHKAXtT2/LHy1LRn3U1wmLMArB1x3Vb21JRsvb7a7C4RS6V96v
1DmQjABjVrwdB4uVXNJQO5WMH3+4b4VysJmdYvWx68n4JjcSa8vB6fv2nJV6
kIy0vSJO6zh4tn/tT1HnZLwdS6I/4NhXDJl3fvW7ZHiFBwy4cvy7nWfULopL
htU9W+vrnPhqFjVfmM5NxkrHishRTvxrcvLq6fWc+BZkmYKT37WHcdodA8n4
svDYL3VO/h93BjT+nE2GkdmSkbUcfobaHC8VCKRgkB2SGM7hT8r3fnP6thTs
4z2wq5/D75OTOpc/y6ZgcUa13jCH/5xZxV9B6il4FSp1PY5Tn/nJe6566afg
XkWb+B5O/U7fXtf23CIFSyPW15lw6tv0k/H7ZnAKBmrlOjdx9LDxZbOuTmIK
rjk+vP6Woxejo/kdpwtSYKc81lvB0dN4VEDXXnoKrKZyzz3k6E322gtDUa5U
iNhYX+jm6PHZCtMeQcFUZNedCBHg6JXPVql36kgq9s7brfGJo+ft50YG8t1T
8QJz+4o450HY/uTh2+9Tsct8q4njbgoCceHuSzJSYRn1lHdClMI07wXJc92p
6P+7dGJYgMNnbsajdtk0NN3Qps4MslE4IlDooJGGkv7Vvz+1s5EpYrJmu1Ea
ZC66ynytYyPSUuTbXe80mD79WsnKZsNayuHvn940DN0K4RtyZ8NM95dm8Ewa
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
0fc3gyg8N71Q5/KZgQ9C9dyDwRTyTy/K4IllQK2rX1U8lMLCnVmBz+MZOGRf
8XBXGIVTPGbP5hIZcFodYNvHwR4doobWKQwkCogaGYRTqMpqPDGZxtH3Hh6x
/71fWhHwapfFVwb22b8u9uFgLQv5ZeOZDOy9z1I8wcFvzk6M3c/h8Jc+G5jB
sdciEVU/RDj6MFP/2c/xL7L4ytfbeRy+/igO/O/3RXq9y4JpBQx4zHL1OHDi
/fDjh71BMQM/jYwLhwMp0EIe32gvZeCkhoj/Kk6+O613nbxawcCS2edaU28o
mFz8Ld5cxdFncdbSEH8Ksfv+49f+yeGDPyX/738URvlPTPysY0BzM7/DRg7f
+4b/NGg0cvjZeuDMrDuFx8Wx38qbGbg875x0gCuH74/6IaqtDFxTVzs04UTh
2LUSI8VOjt4nlOo7bTn8ytqqkm4GboY1OT62pJAnKCVxtJeBZYIWjiWPKKhW
vmUeGOKss/bFfr5D4dVntaZkOgPi74eYh4woVDr/y9w7yrF/vKHYSZfCefnb
jrtYDNz6En3pynkK1xMOrtjwl4H7N/PXTR6kkH7lD38N1wi4PlJLGyUp8C/M
XPqCZwT/9pnHGe+gkHvtGO8g7wh+tckafxakILpE+V/qqhF0vbOUDmawYZ22
YO72mhF8np3PWN/DRp1+8bSw0Ahy7t2+fJZzfp0yTlPPN45gd7ryr6YfbPQZ
nWOo7xrB9NuJ8pv/ce4TgVXD/3aP4OCW6IveTmy8zaofSJYcgXalU5PpUzZU
V+rQ1smMwOqX0YOz19iIIbqtNPkRNNdVynwUZcNU+F6prdYIVE4Nf0l5z0JR
4Z7ivZdGkKftRb/gw8KmB6MF3ZdH0MNIvRv3jIWa4oe5qnojuGJyT8jzCgv7
HltlCJqM4Knyy5ULl7MwWe0SGWs/AqUdHe7r7jJx1kb1o57jCF5vlJC7q83E
px1L3q90HsEuAxd9GzBxxc4z2PLVCF4E7VNvWMlEtri/n/LrEcRt+ypgmT6B
587vHdpiRnBZcxtFxsex7Omi0wZxI/DWU1YubRlHoPH9lX0JI5iS1F4b8mMc
KWpyH0dTR5B6561ppM84+lb8LJhHRnBygzlLQWIcaqFcvLvqRuAjOD3Re3kM
azL0vB7PjGB9q8z1g6IcnX4qvDg9NwINk+4ZoT46pAJ3b7LnGoX3YNeC6M90
nLKbTHBdMIqwT0rSuXs5z1Ul759By0eh7XyNOU92GN3V3wXztnLWNyf+uC83
iLiBDUH86qOInzfisH1BL1xDnPXbNUax1jg9ySuDBqPzjO3x50ZRN6biFnOH
BpHs7MQzl0ZhxMuf/beiB6+8rxZ5GI4iM+a9kpxPN4wPvhtfYjUKj+ZvndOL
OyHqJKi6KGoUOaI3pXiiGvBX1nZZ06dRLJ0+FL10th4tjJ7aqC+jGJnYUFR8
rh4+l1KuqySN4tUnavjabC3+iZ9/5Jw9iqzrXh9UNWrQ9tM7lKduFNlbIm/E
VxXiq8vkjbqGUTyU03un8agA/kf0dn1sHsUKh4THH9bmQy1SMlWxfRSb9dbe
tdLLRaZlZanD4CjKVe7P0prT8GbPAe9zdA4/h3l3225MwYPuYK0to6PQyY/4
U34jEWLq9zpyWaPYo69127Y1EvO56yN8JkdxvHPt4iGjcHSmHTHRnx6FsPsF
ukzba2SbfNwrNTcKrZrLF1zbnPF2Ex/73z8OX2Z+////A/8H3Zkp+Q==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
eqMhWmTvytYWhpmYaP////n/AWn2c1k=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-1.5898848051163572`, 1.7457113562783118`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.9227179690900106`*^9, 3.92271798465001*^9}, 
   3.9227180408774185`*^9, 3.922718114187352*^9, 3.9227181471608086`*^9, {
   3.9227181869573593`*^9, 3.9227181981834235`*^9}, {3.922718273416981*^9, 
   3.9227183136032953`*^9}, {3.922718351687121*^9, 3.9227183776114345`*^9}, {
   3.9227184657075624`*^9, 3.922718468316718*^9}, 3.9227196578552895`*^9, 
   3.9227211014998493`*^9, 3.9227224419224005`*^9, 3.922724924296765*^9, 
   3.922725198438007*^9, 3.9227252707994742`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"N", " ", "=", " ", 
   RowBox[{"8", " ", "case"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{3.922718570249736*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P8", "=", 
  RowBox[{"P", "[", 
   RowBox[{"1", "/", "8"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.922718583156498*^9, 3.9227185839761553`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "140"], ",", 
     FractionBox["9", "280"], ",", 
     FractionBox["11", "6720"], ",", 
     RowBox[{"-", 
      FractionBox["13", "13440"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["9", "280"], ",", 
     FractionBox["13", "140"], ",", 
     FractionBox["13", "13440"], ",", 
     RowBox[{"-", 
      FractionBox["11", "6720"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["11", "6720"], ",", 
     FractionBox["13", "13440"], ",", 
     FractionBox["1", "26880"], ",", 
     RowBox[{"-", 
      FractionBox["1", "35840"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["13", "13440"]}], ",", 
     RowBox[{"-", 
      FractionBox["11", "6720"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "35840"]}], ",", 
     FractionBox["1", "26880"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227185845367174`*^9, 3.9227196578852744`*^9, 
  3.9227211015399046`*^9, 3.922722441945017*^9, 3.9227249243267813`*^9, 
  3.922725198462407*^9, 3.9227252709478664`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Q8", "=", 
  RowBox[{"Q", "[", 
   RowBox[{"1", "/", "8"}], "]"}]}]], "Input",
 CellChangeTimes->{3.9227185910785203`*^9, 3.922718644956594*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["96", "5"]}], ",", 
     FractionBox["96", "5"], ",", 
     RowBox[{"-", 
      FractionBox["11", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["96", "5"], ",", 
     RowBox[{"-", 
      FractionBox["96", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["11", "5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     RowBox[{"-", 
      FractionBox["1", "30"]}], ",", 
     FractionBox["1", "120"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "5"]}], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["1", "120"], ",", 
     RowBox[{"-", 
      FractionBox["1", "30"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9227185915443587`*^9, 3.922718645378703*^9, 
  3.922719657905388*^9, 3.9227211015640197`*^9, 3.9227224419702206`*^9, 
  3.9227249243377094`*^9, 3.9227251984778666`*^9, 3.9227252709647846`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"PP8", "=", 
   RowBox[{"makePorQ", "[", 
    RowBox[{"8", ",", "P8"}], "]"}]}], ";", 
  RowBox[{"MatrixPlot", "[", "PP8", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227186014266157`*^9, 3.9227186118563833`*^9}, {
  3.9227186486564045`*^9, 3.922718683808213*^9}, {3.922718795424593*^9, 
  3.9227188017002964`*^9}, {3.9227197125171623`*^9, 3.922719714785672*^9}, {
  3.922721023653838*^9, 3.922721050790451*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"QQ8", "=", 
   RowBox[{"makePorQ", "[", 
    RowBox[{"8", ",", "Q8"}], "]"}]}], ";", 
  RowBox[{"MatrixPlot", "[", "QQ8", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9227186276366806`*^9, 3.9227186343666487`*^9}, {
   3.922718687662397*^9, 3.922718701468525*^9}, {3.9227187929089365`*^9, 
   3.922718804485367*^9}, {3.922719706586109*^9, 3.922719708695611*^9}, 
   3.9227210244539347`*^9, 3.9227210612087407`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HH8", "=", 
   RowBox[{"-", 
    RowBox[{
     RowBox[{"Inverse", "[", 
      RowBox[{"N", "[", 
       RowBox[{"PP8", ",", "16"}], "]"}], "]"}], ".", 
     RowBox[{"N", "[", 
      RowBox[{"QQ8", ",", "16"}], "]"}]}]}]}], ";", 
  RowBox[{"MatrixPlot", "[", "HH8", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922718709758799*^9, 3.922718728918824*^9}, {
   3.922718761613533*^9, 3.922718789988784*^9}, {3.9227197020417223`*^9, 
   3.9227197041461334`*^9}, 3.922721028331781*^9, 3.922721135370189*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"EE8", ",", "\[Psi]\[Psi]8"}], "}"}], "=", 
   RowBox[{"Eigensystem", "[", "HH8", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.922718829268654*^9, 3.922718836318646*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NN8", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"normal", "[", 
      RowBox[{
       RowBox[{"\[Psi]\[Psi]8", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", "8"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "16"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.922718939940686*^9, 3.9227189492256966`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixPlot", "[", 
   RowBox[{
    RowBox[{"Sign", "[", 
     RowBox[{"\[Psi]\[Psi]8", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "8"}], "]"}], "]"}], "]"}], "*", "NN8", "*", 
    "\[Psi]\[Psi]8"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922718843269332*^9, 3.9227188437708797`*^9}, {
   3.922718953188743*^9, 3.9227189542446585`*^9}, 3.9227196768058896`*^9, 
   3.9227210314803123`*^9, 3.922721079089824*^9, {3.922725103658945*^9, 
   3.922725111039172*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"plot\[Psi]8", "[", "i_", "]"}], ":=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SqrtBox["2"], 
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"17", "-", "i"}], ")"}], "Pi", " ", "x"}], "]"}]}], ",", 
       RowBox[{"render", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Sign", "[", 
           RowBox[{"\[Psi]\[Psi]8", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "8"}], "]"}], "]"}], "]"}], "*", 
          RowBox[{"NN8", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "*", 
          RowBox[{"\[Psi]\[Psi]8", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", "8", ",", "x"}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9227190041084557`*^9, 3.922719016030816*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot\[Psi]8", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.9227190206175356`*^9, 3.922719168886331*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
VQYNF1D5180OkDpIosc2jg5pxTgsfrPBdMiBRFr1k/qHSnEYlxsnzL0o3jB6
sEK8DAfXFUufHbxEIqt3OoKP73H4sUE9bTyERAOa7V1XK3HY82Gf1uo7lD3m
shBhhMPLmJb0M/dJ5J53WCXmIw6af+6J3EgikYrXg7YVn3H44hEj45BKIrpy
b+CTOhzqTkqGT2aQKH94laJ6Iw4GB26oOFK8cOGJY/ObZhxK1ZO/hVJ8sM05
4/LuViqf53aH///7CHLtz/X17ThEfsnctoaaX/Fdrt62CwdrTQX+PcpeSIrb
hf4eHN51ejE+PSTRnqNZqz36KL1p2R5EiSQSkRmrZfXjsEKROHEjhkT17So+
VwZxaJaP+U8kguKp+97L5/3CofvCUyEbar/Wli+ro4Yp/fz39bILFY9l4riX
7BhO1XPHST1vEnXXay7LpOFgJhFj3+1EoofhfhWbGJT9lIklhtYkcjIpPlWM
46Dzm2/sDSTaMI8nuZPA4VFJPHLZQqLh6u3vPnNwSFQp8VLYQKKc4P9crPlU
PC6pahRQ/LB56k+x2x8c9uslrtWkeIF4u9OJ+Y/Sb9P26wotAlRyKUQkYBYH
lOTlNfZWgHYQQvaRwiy48Fpk4tctAZrO3yskvZAFxUVTFmvPCFDN2dt56YtY
ELnj3GN1Sp/7x0WnCxazIOj3j9OtFC+IZVvkGCxlgUzlTxlPLh99dYu2rqX6
QiOHXfrfO/jo8OCSpz0rWeDWbbLIIYbi6e7l+6cVWOC7G/nyKR5XTrAnwpVZ
cKD8wEQGxes0m9SHUptYUPV0V5c2xfPnm9cxFTezIKDtQJeSDQ9dq1WKs9Bj
wXbr3ryrFB8YhZ7e0WXAgtXiH0rQaS6ab/R8+MROajy/rVlkOxdFvlfXvbCH
BVvcbqxIaeGg5KKt/ckHWHA8DzutIZhARZmgPOrMAvkFpqL+FC/wgniibm4s
aN+1o3vTWxbSs3/OHDzFgnAZ7xFrfRb6ICX1ptebBaOBD40l9HFUF/rTuNmf
BW9muOV/lRnoh3uIS0kEC4zlXwl+1YyhhZs+pIUWUPYDYs22O/UhC2G/6zNF
LOhXttytt7YX3RtSdA96w4Iu3xmp+f3Uef0wSu1yOQtKXLLLDY90oXVijuVe
tVQ8D0b4rwj6inSYUz3W31jQKyv3zPhqITpZqLds/SwLdtxTcr9S3A7vHKeW
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
/3/d/wOFEadm
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-1.8538728077652245`, 1.9026286969710071`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.922719021687498*^9, 3.922719171315219*^9}, 
   3.922719658265581*^9, 3.9227211018641896`*^9, 3.922722442349924*^9, 
   3.9227249246789064`*^9, 3.922725198682665*^9, 3.9227252712137785`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", "16"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Reverse", "[", "EE8", "]"}], "/", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Range", "[", "16", "]"}], "Pi"}], ")"}], "^", "2"}]}], ",", 
     RowBox[{
      RowBox[{"Reverse", "[", "EE4", "]"}], "/", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Range", "[", "8", "]"}], "Pi"}], ")"}], "^", "2"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Reverse", "[", "EE2", "]"}], "/", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Range", "[", "4", "]"}], "Pi"}], ")"}], "^", "2"}]}], ",", 
     RowBox[{
      RowBox[{"Reverse", "[", "EE1", "]"}], "/", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Range", "[", "2", "]"}], "Pi"}], ")"}], "^", "2"}]}]}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{"En", "/", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"n", " ", "\[Pi]"}], ")"}], "^", "2"}]}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<Exact\>\"", ",", "\"\<N=8\>\"", ",", "\"\<N=4\>\"", ",", 
        "\"\<N=2\>\"", ",", "\"\<N=1\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Left", ",", "Top"}], "}"}]}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.922719839033879*^9, 3.9227199051127815`*^9}, {
   3.922719960553858*^9, 3.92272005364397*^9}, {3.9227201028267374`*^9, 
   3.9227201845272927`*^9}, {3.922720214787011*^9, 3.9227202515368247`*^9}, {
   3.922720283499386*^9, 3.9227203651037645`*^9}, {3.9227204291036987`*^9, 
   3.922720460623866*^9}, {3.9227205095336924`*^9, 3.9227205215137477`*^9}, {
   3.922720564063706*^9, 3.922720640004219*^9}, {3.9227211765361786`*^9, 
   3.922721222873364*^9}, 3.92272125521006*^9, 3.9227213160031586`*^9, {
   3.922725240117939*^9, 3.922725246888333*^9}}],

Cell[BoxData[
 TagBox[
  GraphicsBox[{{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}, {5., 1.}, {6., 1.}, {
        7., 1.}, {8., 1.}, {9., 1.}, {10., 1.}, {11., 1.}, {12., 1.}, {13., 
        1.}, {14., 1.}, {15., 1.}, {16., 1.}}]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{1., 1.0000001149321351`}, {2., 1.000006350367587}, {3., 
        1.0000587560541228`}, {4., 1.0002606251584978`}, {5., 
        1.0007814049014658`}, {6., 1.0018548669976206`}, {7., 
        1.0037952074457537`}, {8., 1.0132118364233778`}, {9., 
        1.012900428366494}, {10., 1.0220893518756875`}, {11., 
        1.037162128027969}, {12., 1.0610680859077601`}, {13., 
        1.0955500420070396`}, {14., 1.1333555747364985`}, {15., 
        1.141737413384397}, {16., 1.0638724282445466`}}]}, 
      {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{1., 1.0000063503675867`}, {2., 1.0002606251584976`}, {3., 
        1.0018548669976206`}, {4., 1.0132118364233778`}, {5., 
        1.0220893518756877`}, {6., 1.0610680859077601`}, {7., 
        1.1333555747364985`}, {8., 1.0638724282445466`}}]}, 
      {RGBColor[0.922526, 0.385626, 0.209179], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{1., 1.0002606251584976`}, {2., 1.0132118364233778`}, {3., 
        1.0610680859077601`}, {4., 1.0638724282445466`}}]}, 
      {RGBColor[0.528488, 0.470624, 0.701351], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{1., 1.0132118364233778`}, {2., 
        1.0638724282445466`}}]}}, {}, {}, {{}, {}}}, InsetBox[
     TemplateBox[{"\"Exact\"","\"N=8\"","\"N=4\"","\"N=2\"","\"N=1\""},
      "LineLegend",
      DisplayFunction->(FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ),
      Editable->True,
      InterpretationFunction:>(RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& )], 
     Scaled[{0.01, 0.99}], ImageScaled[{0, 1}],
     BaseStyle->{FontSize -> Larger},
     FormatType->StandardForm]},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["n", TraditionalForm], 
     FormBox[
      FractionBox["En", 
       RowBox[{
         SuperscriptBox["\[Pi]", "2"], " ", 
         SuperscriptBox["n", "2"]}]], TraditionalForm]},
   AxesOrigin->{0., 0.9929131293307802},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
          Part[#, 1]], 
         (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
          Part[#, 1]], 
         (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0., 16.}, {1., 1.141737413384397}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}],
  InterpretTemplate[Legended[
    Graphics[{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.019444444444444445`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         Line[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}, {5., 1.}, {6., 1.}, {
          7., 1.}, {8., 1.}, {9., 1.}, {10., 1.}, {11., 1.}, {12., 1.}, {13., 
          1.}, {14., 1.}, {15., 1.}, {16., 1.}}]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.019444444444444445`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         Line[{{1., 1.0000001149321351`}, {2., 1.000006350367587}, {3., 
          1.0000587560541228`}, {4., 1.0002606251584978`}, {5., 
          1.0007814049014658`}, {6., 1.0018548669976206`}, {7., 
          1.0037952074457537`}, {8., 1.0132118364233778`}, {9., 
          1.012900428366494}, {10., 1.0220893518756875`}, {11., 
          1.037162128027969}, {12., 1.0610680859077601`}, {13., 
          1.0955500420070396`}, {14., 1.1333555747364985`}, {15., 
          1.141737413384397}, {16., 1.0638724282445466`}}]}, {
         Hue[0.1421359549995791, 0.6, 0.6], 
         Directive[
          PointSize[0.019444444444444445`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         Line[{{1., 1.0000063503675867`}, {2., 1.0002606251584976`}, {3., 
          1.0018548669976206`}, {4., 1.0132118364233778`}, {5., 
          1.0220893518756877`}, {6., 1.0610680859077601`}, {7., 
          1.1333555747364985`}, {8., 1.0638724282445466`}}]}, {
         Hue[0.37820393249936934`, 0.6, 0.6], 
         Directive[
          PointSize[0.019444444444444445`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         Line[{{1., 1.0002606251584976`}, {2., 1.0132118364233778`}, {3., 
          1.0610680859077601`}, {4., 1.0638724282445466`}}]}, {
         Hue[0.6142719099991583, 0.6, 0.6], 
         Directive[
          PointSize[0.019444444444444445`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         Line[{{1., 1.0132118364233778`}, {2., 
          1.0638724282445466`}}]}}}, {}, {}, {{}, {}}}, {
     DisplayFunction -> Identity, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, AxesOrigin -> {0., 0.9929131293307802}, 
      PlotRange -> {{0., 16.}, {1., 1.141737413384397}}, PlotRangeClipping -> 
      True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
      GoldenRatio^(-1), Axes -> {True, True}, 
      AxesLabel -> {$CellContext`n, $CellContext`En $CellContext`n^(-2) 
        Pi^(-2)}, AxesOrigin -> {0., 0.9929131293307802}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
             Part[#, 1]], 
            (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
             Part[#, 1]], 
            (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0., 16.}, {1., 1.141737413384397}}, PlotRangeClipping -> 
      True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    Placed[
     Unevaluated[
      LineLegend[{
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]]}, {"Exact", "N=8", "N=4", "N=2", "N=1"}, 
       LegendMarkers -> {{False, Automatic}, {False, Automatic}, {
         False, Automatic}, {False, Automatic}, {False, Automatic}}, 
       Joined -> {True, True, True, True, True}, LabelStyle -> {}, 
       LegendLayout -> "Column"]], {Left, Top}, Identity]]& ],
  AutoDelete->True,
  Editable->True,
  SelectWithContents->False,
  Selectable->True]], "Output",
 CellChangeTimes->{{3.9227198741687975`*^9, 3.9227199053529425`*^9}, {
   3.922719980872947*^9, 3.922720054275761*^9}, {3.922720114066966*^9, 
   3.9227201850306053`*^9}, {3.922720231556797*^9, 3.922720252176811*^9}, {
   3.922720290858079*^9, 3.9227203354037137`*^9}, 3.922720365553815*^9, {
   3.9227204343339972`*^9, 3.9227204612872148`*^9}, {3.9227205149237175`*^9, 
   3.922720521895054*^9}, {3.9227205713740835`*^9, 3.9227206404140186`*^9}, 
   3.922721101983427*^9, {3.922721184190048*^9, 3.9227212234462037`*^9}, 
   3.9227212559430733`*^9, 3.9227213163667474`*^9, 3.922722442470209*^9, 
   3.9227249247567225`*^9, 3.9227251988727345`*^9, 3.9227252713027225`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getlist", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"res", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         SqrtBox["2"], 
         RowBox[{"Sin", "[", 
          RowBox[{"n", " ", "Pi", " ", "x"}], "]"}]}], ",", 
        RowBox[{"render", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Sign", "[", 
            RowBox[{"\[Psi]\[Psi]8", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"17", "-", "n"}], ",", "8"}], "]"}], "]"}], "]"}], "*", 
           RowBox[{"NN8", "[", 
            RowBox[{"[", 
             RowBox[{"17", "-", "n"}], "]"}], "]"}], "*", 
           RowBox[{"\[Psi]\[Psi]8", "[", 
            RowBox[{"[", 
             RowBox[{"17", "-", "n"}], "]"}], "]"}]}], ",", "8", ",", "x"}], 
         "]"}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", "res"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.922721424488934*^9, 3.922721589842206*^9}, {
  3.9227216307141633`*^9, 3.9227216626120567`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "need", " ", "to", " ", "comment", " ", "out", " ", "some", " ", "lines", 
    " ", "as", " ", "n", " ", "increases"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"plot\[Psi]s", "[", "n_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SqrtBox["2"], 
          RowBox[{"Sin", "[", 
           RowBox[{"n", " ", "Pi", " ", "x"}], "]"}]}], ",", 
         RowBox[{"render", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sign", "[", 
             RowBox[{"\[Psi]\[Psi]8", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"17", "-", "n"}], ",", "8"}], "]"}], "]"}], "]"}], 
            "*", 
            RowBox[{"NN8", "[", 
             RowBox[{"[", 
              RowBox[{"17", "-", "n"}], "]"}], "]"}], "*", 
            RowBox[{"\[Psi]\[Psi]8", "[", 
             RowBox[{"[", 
              RowBox[{"17", "-", "n"}], "]"}], "]"}]}], ",", "8", ",", "x"}], 
          "]"}], ",", 
         RowBox[{"render", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sign", "[", 
             RowBox[{"\[Psi]\[Psi]4", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"9", "-", "n"}], ",", "4"}], "]"}], "]"}], "]"}], "*", 
            RowBox[{"NN4", "[", 
             RowBox[{"[", 
              RowBox[{"9", "-", "n"}], "]"}], "]"}], "*", 
            RowBox[{"\[Psi]\[Psi]4", "[", 
             RowBox[{"[", 
              RowBox[{"9", "-", "n"}], "]"}], "]"}]}], ",", "4", ",", "x"}], 
          "]"}], ",", 
         RowBox[{"render", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sign", "[", 
             RowBox[{"\[Psi]\[Psi]2", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"5", "-", "n"}], ",", "2"}], "]"}], "]"}], "]"}], "*", 
            RowBox[{"NN2", "[", 
             RowBox[{"[", 
              RowBox[{"5", "-", "n"}], "]"}], "]"}], "*", 
            RowBox[{"\[Psi]\[Psi]2", "[", 
             RowBox[{"[", 
              RowBox[{"5", "-", "n"}], "]"}], "]"}]}], ",", "2", ",", "x"}], 
          "]"}]}], 
        RowBox[{"(*", 
         RowBox[{",", 
          RowBox[{"render", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Sign", "[", 
              RowBox[{"\[Psi]\[Psi]1", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"3", "-", "n"}], ",", "1"}], "]"}], "]"}], "]"}], 
             "*", 
             RowBox[{"NN1", "[", 
              RowBox[{"[", 
               RowBox[{"3", "-", "n"}], "]"}], "]"}], "*", 
             RowBox[{"\[Psi]\[Psi]1", "[", 
              RowBox[{"[", 
               RowBox[{"3", "-", "n"}], "]"}], "]"}]}], ",", "1", ",", "x"}], 
           "]"}]}], "*)"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], 
      RowBox[{"(*", 
       RowBox[{",", 
        RowBox[{"PlotLegends", "\[Rule]", 
         RowBox[{"Placed", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<Exact\>\"", ",", "\"\<N=8\>\"", ",", "\"\<N=4\>\"", ",", 
             "\"\<N=2\>\"", ",", "\"\<N=1\>\""}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"Center", ",", "Bottom"}], "}"}]}], "]"}]}]}], "*)"}], 
      "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9227218220298615`*^9, 3.9227218884853497`*^9}, {
  3.9227219235354767`*^9, 3.922721982865325*^9}, {3.922722034325436*^9, 
  3.9227220616407175`*^9}, {3.9227220971692934`*^9, 3.922722099689476*^9}, {
  3.922722155409335*^9, 3.922722157709485*^9}, {3.9227251218948894`*^9, 
  3.9227251601504803`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot\[Psi]s", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.9227218568011756`*^9, 3.9227218587356014`*^9}, 
   3.9227219675495663`*^9, {3.922722065425156*^9, 3.9227222615729256`*^9}, {
   3.9227251190088797`*^9, 3.92272517033753*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
/wOz1Fy6
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
4lJ8nvQIhe3ZzPr3j2C2sv9//1n6P8igfa8=
      "]]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
uIi0vv06V0/sgX3rEl//k6CjwZBDo77He+HXPU+BYE4G+qjccLRPqxcCvrzh
Mt3OQLdGLz5X1u2Fli1aNlv2MhCb2gOYMe2FEgWerae1GGjfXMcHS+deaBDP
yO/0YiBv81suB6N7YfQrefHYMAPx7c5YJJF6YaQ40NQkYQlpnw8ZJc72Qpn9
touktCV0J/pK69RCL9yzO2Dkmr+E+tl3Zkws90KoBd+CTsMSej8dYTfC2wcb
dzvv27+whJTyXdt7VPrggfoVh3INJrKf1SvvPt4HKsIlG07qMdFLqb2ZXVp9
UA9vo4vNmOhX7PDjn/p9EBS90fmmIxNV+RprtF7ug7MC7utbwpnI5JRSdu3j
PvB+/4pNqJ2JggK439Y86YPV1Dz18D4myi+eDqt+3geOaxfs50aZSFg22bEq
vg8aM01cAheYaISXX6wspw8Wptqc+/lY6FY/I6Kgtw8qxsQULY1ZKPJGsUuK
dD9cWGURg8pYaE47N4JHvh/cYm5euVjDQmd2pmXdO9gPn8Op1bubWYijKXbB
+EQ/PE7mVL3Vx0K+0t73/pj1A8U7n7JjkYVcxg+HWfj3g3lJvXvWHgzVl8h/
rnzQD4kBXUY60hiSei7VIhvWD7zpM1sb5TA0qiHItx7TD+ellHVfqGDI8h3j
dXZ6P8RWH/JVNcDQSav8tI3d/fD11e+NFW4Yeq/4ucmd0A/HIt+dFPTC0OqG
lNmhkX4Yn9FztryPodLC6AMFM/3wurn8UmIwhpT43Ytt//VD7kERIfVoDEXO
uBCaOQhgfHLjA/pLDM1V2f05wkUAvpKV7hdxGEq7barJLUSA1ebNCvFJGBJv
PdBQIkuAR7FRn75mYcjvo8yMpBIBNFGjdnMuhgi+u7dEHSGAmMmW+uZ8DL2U
3WripEUArZdZAVElGKKvb3TvOEWAcIMthWe/Y8iUsBpz3IAAS06e7ewVGNoS
RuvdZkmAw7W2JTI1GHKxJf3ysybAls1TIW/rcP1URnZO2xGALddd7U8Dhh4Q
Wy9X3CCArXSGeUALhn5pZ5OuBxOgsjTM6EU3hipSqQn3HxMgGLvWdroXQ4+4
FM+FPSHA7TDFFkofhvg6c2o+vSLAz9QrGn8HMNR7ZN6nMJ4AOoc78q8PYejd
mwPKNUkEIApJfGwYxtC+K1/ej2UQIKPn9orhGIZotQtW8zkEaCu44eQ1jqHC
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
zMbm4sP+vup/GN4nCA==
      "]]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwVmHk4VV8Xx5UGSaZMSRmTCkkqIovIkHlooIxJKiLJT0kkpFIpKmSKSFJk
JmxkKJnnebpm93K595xI5d3vPzyfZ+29hu9ae59zrriju/nFtSwsLMP4z///
n7w41VI+fUrdb+xIVHN3svo6LWGPoW1KYMnS8nGbbCAcTIiKzdmmDTKe3qoO
ki/AoKErO26bJTzrV9A7wJsEZ5x+lb7Y5gR8Tzuy19G/wMD+B1pPtnnBd+3X
MdwZFZDIbxLyaFsQnL7eHRO6qwV8G15XnS4OAlO5jXNCqS1wOnh4reS5YHjA
oxe1S7oVOIjr/l9jQ8CN3T4+V6oNfNojfaiiD8G9KmT35+0dYBbRe8VY+in8
fpwwqrTQDffYcnY/3BYJh1eR2dCOYdir+zw02yMSkmcVTRuth6E12H26rzYS
Uh1sRW68HgYpVtmP8t4vgTaZ+XiQawRq/r6Tb299Bc0GzBr4OwIcjFeHRMOi
4QOlKE+rjgJRA7e18v7Fg/M04y2P/CRoili9GzyVAGNN2aHzDpMwY31kPdun
BPi5L/tjyMtJ2Em9deGTXCIYaWrxjaxMgvvlw7tY+hPhestFD/3qKeB1ykxL
UU4CtuUL1iwGM3DW6m0mfeEdSK+sStRK0GC+z5I9STgFUi823JY2oEGILdtF
C60UUHyfLmJwgwY5F9yF8yNTgDHw+/VYJQ04rx0L9j2SCsV2pYPWdnNQHdhj
vcHvPRiPSKm6PJkHxQyeDSJs6cCRtNvMbIgOP+Sr7RsU0kGU46f27Dwd7L/4
fL1rlQ4/tnNpXWZZgCf5Qx4j6emwS0s2jEd8AabKP/WlGn2EZsvEh3wOCxDf
of/lQEQGuMTELtH6FmDz6r3zujszwdbReFitdBGiLp+xldXJhKOG6q376hZB
ql3WnudaJkiVn1Vb07UI6h+6LvSVZsIdftlkO/oiFH14lVcgnwWJ4lKjs+IM
oFlQSwwas4Btu+B5gwAGKG3qOqY+mgU7Fw3KUx8z4HZZRZkCmQXJ4dInpl8x
YOOe1+X8O7+ABWO2V/ITA8T/aVYNuX2BnN9PbTy6GXAq7fXPG1uyocyVQbjv
ZUKsTaChs3g2iGwUtzyuxIRRXreGs4eywTDV3ffPMSa4+x1vOmaTDR6VT01k
zJjw0JzWuvFTNujsyFCy82ZC6Z/jvW8Mc8C1UGyPRQkT1mXLnXtqnwNS1N9s
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
/gczACsk
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-1.4207373037636346`, 1.4207368210659597`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.9227251495028696`*^9, 3.922725199037898*^9}, 
   3.922725271467737*^9}]
}, Open  ]]
},
WindowSize->{759, 833},
WindowMargins->{{459, Automatic}, {64, Automatic}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 3318, 112, 164, "Input"],
Cell[3879, 134, 2916, 85, 126, "Input"],
Cell[6798, 221, 1573, 42, 138, "Input"],
Cell[8374, 265, 2368, 63, 126, "Input"],
Cell[10745, 330, 2303, 65, 126, "Input"],
Cell[13051, 397, 3784, 95, 183, "Input"],
Cell[16838, 494, 163, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[17026, 502, 146, 3, 30, "Input"],
Cell[17175, 507, 1109, 35, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18321, 547, 197, 4, 30, "Input"],
Cell[18521, 553, 1147, 37, 53, "Output"]
}, Open  ]],
Cell[19683, 593, 452, 12, 30, "Input"],
Cell[20138, 607, 430, 12, 30, "Input"],
Cell[20571, 621, 320, 8, 30, "Input"],
Cell[20894, 631, 239, 6, 30, "Input"],
Cell[21136, 639, 389, 12, 42, "Input"],
Cell[21528, 653, 459, 11, 30, "Input"],
Cell[21990, 666, 1042, 30, 71, "Input"],
Cell[23035, 698, 784, 22, 42, "Input"],
Cell[23822, 722, 187, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[24034, 730, 170, 4, 30, "Input"],
Cell[24207, 736, 1191, 36, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25435, 777, 170, 4, 30, "Input"],
Cell[25608, 783, 1178, 38, 53, "Output"]
}, Open  ]],
Cell[26801, 824, 1708, 49, 107, "Input"],
Cell[28512, 875, 1664, 50, 107, "Input"],
Cell[30179, 927, 321, 8, 30, "Input"],
Cell[CellGroupData[{
Cell[30525, 939, 271, 6, 30, "Input"],
Cell[30799, 947, 1545, 48, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32381, 1000, 402, 12, 30, "Input"],
Cell[32786, 1014, 567, 10, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33390, 1029, 461, 12, 30, "Input"],
Cell[33854, 1043, 1150, 37, 98, "Output"]
}, Open  ]],
Cell[35019, 1083, 411, 10, 30, "Input"],
Cell[35433, 1095, 983, 29, 90, "Input"],
Cell[CellGroupData[{
Cell[36441, 1128, 210, 3, 30, "Input"],
Cell[36654, 1133, 25473, 432, 229, "Output"]
}, Open  ]],
Cell[62142, 1568, 163, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[62330, 1576, 168, 4, 30, "Input"],
Cell[62501, 1582, 1127, 35, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63665, 1622, 170, 4, 30, "Input"],
Cell[63838, 1628, 1131, 37, 53, "Output"]
}, Open  ]],
Cell[64984, 1668, 350, 8, 30, "Input"],
Cell[65337, 1678, 322, 7, 30, "Input"],
Cell[65662, 1687, 399, 9, 30, "Input"],
Cell[66064, 1698, 347, 9, 30, "Input"],
Cell[CellGroupData[{
Cell[66436, 1711, 351, 11, 30, "Input"],
Cell[66790, 1724, 747, 14, 50, "Output"]
}, Open  ]],
Cell[67552, 1741, 387, 11, 30, "Input"],
Cell[67942, 1754, 382, 10, 30, "Input"],
Cell[68327, 1766, 1009, 29, 90, "Input"],
Cell[CellGroupData[{
Cell[69361, 1799, 436, 6, 30, "Input"],
Cell[69800, 1807, 44123, 736, 228, "Output"]
}, Open  ]],
Cell[113938, 2546, 163, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[114126, 2554, 170, 4, 30, "Input"],
Cell[114299, 2560, 1137, 35, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115473, 2600, 168, 4, 30, "Input"],
Cell[115644, 2606, 1155, 37, 53, "Output"]
}, Open  ]],
Cell[116814, 2646, 449, 9, 30, "Input"],
Cell[117266, 2657, 450, 9, 30, "Input"],
Cell[117719, 2668, 537, 13, 30, "Input"],
Cell[118259, 2683, 237, 6, 30, "Input"],
Cell[118499, 2691, 386, 11, 30, "Input"],
Cell[118888, 2704, 511, 12, 30, "Input"],
Cell[119402, 2718, 955, 28, 90, "Input"],
Cell[CellGroupData[{
Cell[120382, 2750, 132, 2, 30, "Input"],
Cell[120517, 2754, 63580, 1056, 237, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184134, 3815, 2189, 57, 107, "Input"],
Cell[186326, 3874, 28337, 575, 271, "Output"]
}, Open  ]],
Cell[214678, 4452, 1070, 30, 148, "Input"],
Cell[215751, 4484, 3839, 102, 186, "Input"],
Cell[CellGroupData[{
Cell[219615, 4590, 261, 4, 30, "Input"],
Cell[219879, 4596, 61776, 1031, 262, "Output"]
}, Open  ]]
}
]
*)

